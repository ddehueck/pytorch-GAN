import torch as t
import torch.nn as nn


class DiscriminatorCriterion(nn.Module):

    def __init__(self):
        super(DiscriminatorCriterion, self).__init__()

    def forward(self, data_logits, z_logits):
        """
        Computes criterion value for the Discriminator

        :param data_logits: Probability values givene by the Discriminator
        on real data samples.
        :param z_logits: The probability scores given by the Discriminator
        on the samples generated by the generator
        :return: 1-dimensional tensor
        """
        # Returns tensor of size: batch_size x 1
        log_sum = t.log(data_logits) + t.log(t.ones_like(z_logits) - z_logits)

        # Sum down each row
        batch_avg = log_sum.sum() / len(log_sum)

        # Negative so gradient is ascended - max in minmax game
        return -batch_avg
