import torch as t
import torch.nn as nn


class GeneratorCriterion(nn.Module):
    def __init__(self):
        super(GeneratorCriterion, self).__init__()

    def forward(self, z_logits):
        """
        Computes criterion value for the Generator

        :param z_logits: The probability scores given by the Discriminator
        on the samples generated by the generator - the generator wants these
        to be high
        :return: 1-dimensional tensor
        """
        # Returns tensor of size: batch_size x 1
        #log_val = t.log(t.ones_like(z_logits) - z_logits)
        log_val = t.log(z_logits)

        # Sum down each row
        batch_avg = log_val.sum() / len(log_val)

        return -batch_avg
